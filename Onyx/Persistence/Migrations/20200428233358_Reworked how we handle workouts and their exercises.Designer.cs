// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200428233358_Reworked how we handle workouts and their exercises")]
    partial class Reworkedhowwehandleworkoutsandtheirexercises
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("Domain.GymClass", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfClass")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GymClass");
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Memberships.Membership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            Id = "29ad0121-b184-461b-b2c9-518355e35123",
                            Cost = 250.0,
                            Description = "Approved by Boris, loved by Slavs, misunderstood by Americans.",
                            Name = "Gopnik Workout"
                        },
                        new
                        {
                            Id = "615ca8e5-0124-4ea6-85b4-3badb4a6ec1a",
                            Cost = 100.0,
                            Description = "Simple and effective after you gorged yourself",
                            Name = "Squats and Pull Ups"
                        });
                });

            modelBuilder.Entity("Domain.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("From")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "3a0a646e-2fa8-4ab9-b2dc-3aa2518d4e78",
                            Content = "Test Message 1",
                            DateOfMessage = new DateTime(2020, 4, 27, 19, 33, 58, 529, DateTimeKind.Local).AddTicks(5952),
                            From = "Anna Runner",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "d1940fcc-f86a-4b48-ad97-3f7ff1321647",
                            Content = "Test Message 2",
                            DateOfMessage = new DateTime(2020, 4, 28, 19, 33, 58, 532, DateTimeKind.Local).AddTicks(212),
                            From = "Michael Kovalsky",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "b92e0a10-33e1-4108-be76-c1ec87677330",
                            Content = "Test Message 3",
                            DateOfMessage = new DateTime(2020, 4, 26, 19, 33, 58, 532, DateTimeKind.Local).AddTicks(246),
                            From = "Aaron Runner",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Workouts.Exercise", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExerciseGroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Reps")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseGroupId");

                    b.ToTable("Exercise");

                    b.HasData(
                        new
                        {
                            Id = "ab26f0e7-bae6-4eae-bb22-5e9ef21c516e",
                            ExerciseGroupId = "2b60f7f4-09c5-403c-882b-eadf0bf912d0",
                            Reps = 4
                        },
                        new
                        {
                            Id = "c926420b-90bb-457f-92cd-0e555c902e17",
                            ExerciseGroupId = "2b60f7f4-09c5-403c-882b-eadf0bf912d0",
                            Reps = 4
                        },
                        new
                        {
                            Id = "5dfcbf49-29b7-4b76-a9d0-82ad9c30f28a",
                            ExerciseGroupId = "2b60f7f4-09c5-403c-882b-eadf0bf912d0",
                            Reps = 3
                        },
                        new
                        {
                            Id = "a1008646-8659-41d7-bed8-cb75b6886c8a",
                            ExerciseGroupId = "adf78c99-8106-49df-b0dd-d0b145ddc53e",
                            Reps = 4
                        },
                        new
                        {
                            Id = "8d3de98e-7b24-426e-be1e-584e05ef6eef",
                            ExerciseGroupId = "adf78c99-8106-49df-b0dd-d0b145ddc53e",
                            Reps = 4
                        },
                        new
                        {
                            Id = "f09bfd4e-6e79-45ae-843f-d0c349b92ae1",
                            ExerciseGroupId = "adf78c99-8106-49df-b0dd-d0b145ddc53e",
                            Reps = 3
                        },
                        new
                        {
                            Id = "7a756e3e-253b-4450-b1f7-064b98f31887",
                            ExerciseGroupId = "ba596bca-7603-4d16-b9bc-aae93a414330",
                            Reps = 4
                        },
                        new
                        {
                            Id = "9461b24d-3dc6-4ca6-8ab4-4f12a70eeec9",
                            ExerciseGroupId = "ba596bca-7603-4d16-b9bc-aae93a414330",
                            Reps = 4
                        },
                        new
                        {
                            Id = "ee007f23-8324-45a0-a737-3006c3033b0c",
                            ExerciseGroupId = "ba596bca-7603-4d16-b9bc-aae93a414330",
                            Reps = 3
                        });
                });

            modelBuilder.Entity("Domain.Workouts.ExerciseGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pace")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sets")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkoutId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("ExerciseGroup");

                    b.HasData(
                        new
                        {
                            Id = "2b60f7f4-09c5-403c-882b-eadf0bf912d0",
                            Name = "DB Hang Snatch",
                            Pace = "x-safe",
                            Sets = 4,
                            WorkoutId = "ba596bca-7603-4d16-b9bc-aae93a414330"
                        },
                        new
                        {
                            Id = "adf78c99-8106-49df-b0dd-d0b145ddc53e",
                            Name = "Goblet Front Squat",
                            Pace = "safe-x",
                            Sets = 4,
                            WorkoutId = "ba596bca-7603-4d16-b9bc-aae93a414330"
                        },
                        new
                        {
                            Id = "6bcc3b40-17e5-440a-9f5f-98bdbb73f7f7",
                            Name = "DB RDL",
                            Pace = "3-1-x",
                            Sets = 4,
                            WorkoutId = "ba596bca-7603-4d16-b9bc-aae93a414330"
                        });
                });

            modelBuilder.Entity("Domain.Workouts.Workout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfWorkout")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MembershipId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.ToTable("Workout");

                    b.HasData(
                        new
                        {
                            Id = "ba596bca-7603-4d16-b9bc-aae93a414330",
                            DateOfWorkout = new DateTime(2020, 4, 28, 19, 33, 58, 533, DateTimeKind.Local).AddTicks(5554),
                            Description = "Regular push ups",
                            MembershipId = "29ad0121-b184-461b-b2c9-518355e35123",
                            Name = "Gopnik One"
                        },
                        new
                        {
                            Id = "5f2ed3f1-a767-4803-b612-d3f04e508cc1",
                            DateOfWorkout = new DateTime(2020, 4, 28, 19, 33, 58, 533, DateTimeKind.Local).AddTicks(7997),
                            Description = "",
                            MembershipId = "615ca8e5-0124-4ea6-85b4-3badb4a6ec1a",
                            Name = "Squat One"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Workouts.Exercise", b =>
                {
                    b.HasOne("Domain.Workouts.ExerciseGroup", "ExerciseGroup")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseGroupId");
                });

            modelBuilder.Entity("Domain.Workouts.ExerciseGroup", b =>
                {
                    b.HasOne("Domain.Workouts.Workout", "Workout")
                        .WithMany("ExerciseGroups")
                        .HasForeignKey("WorkoutId");
                });

            modelBuilder.Entity("Domain.Workouts.Workout", b =>
                {
                    b.HasOne("Domain.Memberships.Membership", "Membership")
                        .WithMany("Workouts")
                        .HasForeignKey("MembershipId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
